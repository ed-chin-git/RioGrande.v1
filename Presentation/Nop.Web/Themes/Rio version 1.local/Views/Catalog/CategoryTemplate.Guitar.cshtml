@model CategoryModel
@{
    Layout = "~/Views/Shared/_ColumnsOne.cshtml";
    Html.AddTitleParts(!String.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);

    var canonicalUrlsEnabled = EngineContext.Current.Resolve<SeoSettings>().CanonicalUrlsEnabled;
    if (canonicalUrlsEnabled)
    {
        var categoryUrl = Url.RouteUrl("Category", new { SeName = Model.SeName }, this.Request.Url.Scheme);
        Html.AddCanonicalUrlParts(categoryUrl);
    }

    var breadcrumbDelimiter = EngineContext.Current.Resolve<CommonSettings>().BreadcrumbDelimiter;
}
@using Nop.Core.Domain.Common;
@using Nop.Core.Domain.Seo;
@using Nop.Core.Infrastructure;
@using Nop.Web.Models.Catalog;
@using Nop.Web.Extensions;
@*category breadcrumb*@
@if (Model.DisplayCategoryBreadcrumb)
{
    <div class="breadcrumb">
        <ul>
            <li><a href="@Url.RouteUrl("HomePage")" title="@T("Categories.Breadcrumb.Top")">@T("Categories.Breadcrumb.Top")</a>
                <span class="delimiter">@breadcrumbDelimiter</span> </li>
            @foreach (var cat in Model.CategoryBreadcrumb)
            {
                var isLastCategory = cat.Id == Model.Id;
                <li>
                    @if (isLastCategory)
                    {
                        <strong class="current-item">@cat.Name</strong>
                    }
                    else
                    {
                        <a href="@Url.RouteUrl("Category", new { SeName = cat.SeName })" title="@cat.Name">@cat.Name</a>
                        <span class="delimiter">@breadcrumbDelimiter</span>
                    }
                </li>
            }
        </ul>
    </div>
    @Html.Widget("widgetzone.guitar.banner", Model.Id)
}
<div class="page category-page">
    <div class="page-title">
        <h1>@Model.Name</h1>
    </div>
    <div class="page-body">
        @Html.Widget("categorydetails_top", Model.Id)
        @*description*@
        @if (!String.IsNullOrWhiteSpace(Model.Description))
        {
            <div class="category-description">
                @Html.Raw(Model.Description)
            </div>
        }
        @Html.Widget("categorydetails_before_subcategories", Model.Id)
        @*subcategories*@
        @if (Model.SubCategories.Count > 0)
        {
            <div class="sub-category-grid">
                @foreach (var item in Model.SubCategories)
                {
                    <div class="item-box">
                        <div class="sub-category-item">
                            <h2 class="title">
                                <a href="@Url.RouteUrl("Category", new { SeName = item.SeName })" title="Pickups @item.Name">
                                    @item.Name</a>
                            </h2>

                           @* ==EDC=  special links ====================================================================================*@
                           @switch (item.SeName)
                           {
                              case "acoustic": { } break;
                              case "specialty-pickups": { } break;
                              case "for-stratocaster": { <div class="SingleSetsLeft"><a href="@Url.RouteUrl("Category", new { SeName = "singles" })" title="Single Pickups @item.Name">Singles</a></div> <div class="SingleSetsRight"><a href="@Url.RouteUrl("Category", new { SeName = "sets" })" title="Pickup Sets">Sets</a></div> } break;
                              case "for-telecasters":  { <div class="SingleSetsLeft"><a href="@Url.RouteUrl("Category", new { SeName = "neck-for-telecaster" })" title="Neck Pickups @item.Name">Neck</a></div> <div class="SingleSetsCenter"><a href="@Url.RouteUrl("Category", new { SeName = "bridge-for-telecaster" })" title="Bridge Pickups @item.Name">Bridge</a></div>    <div class="SingleSetsRight"><a href="@Url.RouteUrl("Category", new { SeName = "sets-for-telecaster" })" title="Sets @item.Name">Sets</a></div> } break;
                              case "humbuckers": { <div class="SingleSetsLeft"><a href="@Url.RouteUrl("Category", new { SeName = "singles-for-humbucking" })" title="Single Pickups @item.Name">Singles</a></div> <div class="SingleSetsRight"><a href="@Url.RouteUrl("Category", new { SeName = "humbucking-sets-for-guitar" })" title="Pickup Sets">Sets</a></div> } break;
                              case "mini-humbuckings": { <div class="SingleSetsLeft"><a href="@Url.RouteUrl("Category", new { SeName = "single-mini-humbuckers-for-guitar" })" title="Single Pickups @item.Name">Singles</a></div> <div class="SingleSetsRight"><a href="@Url.RouteUrl("Category", new { SeName = "mini-humbucker-sets" })" title="Pickup Sets">Sets</a></div> } break;
                              case "for-p-90":  { <div class="SingleSetsLeft"><a href="@Url.RouteUrl("Category", new { SeName = "single-pickups-for-p-90" })" title="Single Pickups @item.Name">Singles</a></div> <div class="SingleSetsRight"><a href="@Url.RouteUrl("Category", new { SeName = "pickup-sets-for-p-90" })" title="Pickup Sets">Sets</a></div> } break;
                              case "7-string":  { <div class="SingleSetsLeft"><a href="@Url.RouteUrl("Category", new { SeName = "single-pickups-for-7-string-guitars" })" title="Single Pickups @item.Name">Singles</a></div> <div class="SingleSetsRight"><a href="@Url.RouteUrl("Category", new { SeName = "pickup-sets-for-7-string-guitars" })" title="Pickup Sets">Sets</a></div> } break;
                              case "asat":  { <div class="SingleSetsLeft"><a href="@Url.RouteUrl("Category", new { SeName = "single-pickups-for-asat-guitars" })" title="Single Pickups @item.Name">Singles</a></div> <div class="SingleSetsRight"><a href="@Url.RouteUrl("Category", new { SeName = "pickup-sets-for-asat-guitars" })" title="Pickup Sets">Sets</a></div> } break;
                              case "jazzmaster":  { <div class="SingleSetsLeft"><a href="@Url.RouteUrl("Category", new { SeName = "single-pickups-for-jazzmaster-guitars" })" title="Single Pickups @item.Name">Singles</a></div> <div class="SingleSetsRight"><a href="@Url.RouteUrl("Category", new { SeName = "pickup-sets-for-jazzmaster-guitars" })" title="Pickup Sets">Sets</a></div> } break;
                              case "jaguar":  { <div class="SingleSetsLeft"><a href="@Url.RouteUrl("Category", new { SeName = "single-pickups-for-jaguar-guitars" })" title="Single Pickups @item.Name">Singles</a></div> <div class="SingleSetsRight"><a href="@Url.RouteUrl("Category", new { SeName = "pickup-sets-for-jaguar-guitars" })" title="Pickup Sets">Sets</a></div> } break;
                              default:  {<div class="SingleSetsLeft"><a href="@Url.RouteUrl("Category", new { SeName = @item.SeName })"  title="Single Pickups @item.Name">Singles</a></div> <div class="SingleSetsRight"><a href="@Url.RouteUrl("Category", new { SeName = @item.SeName })" title="Sets @item.Name">Sets</a></div>} break;
                           }
                           @*=============================================================================================================*@ 
                                    <div class="picture">
                                        <a href="@Url.RouteUrl("Category", new { SeName = item.SeName })" title="@item.PictureModel.Title">
                                            <img alt="@item.PictureModel.AlternateText" src="@item.PictureModel.ImageUrl"
                                                 title="@item.PictureModel.Title" />   
                                        </a>
                                    </div>
                                </div>
                    </div>
                }
            </div>
        }
        @Html.Widget("categorydetails_before_featured_products", Model.Id)
        @*featured products*@
        @if (Model.FeaturedProducts.Count > 0)
        {
            <div class="product-grid featured-product-grid">
                <div class="title">
                    <strong>@T("Products.FeaturedProducts")</strong>
                </div>
                <div>
                    @foreach (var item in Model.FeaturedProducts)
                    {
                        <div class="item-box">
                            @Html.Partial("_ProductBox", item)
                        </div>
                    }
                </div>
            </div>
        }
        @Html.Widget("categorydetails_after_featured_products", Model.Id)
        <div class="product-selectors">
            @*view mode*@
            @if (Model.PagingFilteringContext.AllowProductViewModeChanging && Model.Products.Count > 0)
            {
                <div class="product-viewmode">
                    <span>@T("Catalog.ViewMode")</span>
                    @Html.DropDownList("products-viewmode", Model.PagingFilteringContext.AvailableViewModes, new { onchange = "setLocation(this.value);" })
                </div>
            }
            @*sorting*@
            @if (Model.PagingFilteringContext.AllowProductSorting && Model.Products.Count > 0)
            {
                <div class="product-sorting">
                    <span>@T("Catalog.OrderBy")</span>
                    @Html.DropDownList("products-orderby", Model.PagingFilteringContext.AvailableSortOptions, new { onchange = "setLocation(this.value);" })
                </div>
            }
            @*page size*@
            @if (Model.PagingFilteringContext.AllowCustomersToSelectPageSize && Model.Products.Count > 0)
            {
                <div class="product-page-size">
                    <span>@T("Catalog.PageSize")</span> 
                    @Html.DropDownList("products-pagesize", Model.PagingFilteringContext.PageSizeOptions, new { onchange = "setLocation(this.value);" })
                    <span>@T("Catalog.PageSize.PerPage")</span>
                </div>
            }
        </div>
        @Html.Widget("categorydetails_before_filters", Model.Id)
        <div class="product-filters-wrapper">
            @*filtering*@
            @if (Model.PagingFilteringContext.PriceRangeFilter.Enabled)
            {
                @Html.Partial("_FilterPriceBox", Model.PagingFilteringContext.PriceRangeFilter, new ViewDataDictionary())
            }
            @*filtering*@
            @if (Model.PagingFilteringContext.SpecificationFilter.Enabled)
            {
                @Html.Partial("_FilterSpecsBox", Model.PagingFilteringContext.SpecificationFilter, new ViewDataDictionary())
            }
        </div>
        @Html.Widget("categorydetails_before_product_list", Model.Id)
        @*product list*@
        @if (Model.Products.Count > 0)
        {
            if (Model.PagingFilteringContext.ViewMode == "list")
            {
            @*list mode*@
            <div class="product-list">
                @foreach (var product in Model.Products)
                {
                    <div class="item-box">
                        @Html.Partial("_ProductBox", product)
                    </div>
                }
            </div>       
            }
            else
            {
            @*grid mode*@
            <div class="product-grid">
                @foreach (var product in Model.Products)
                {
                    <div class="item-box">
                        @Html.Partial("_ProductBox", product)
                    </div>
                }
            </div>
            }
        }
        <div class="pager">
            @Html.Pager(Model.PagingFilteringContext).QueryParam("pagenumber")
        </div>
        @Html.Widget("categorydetails_bottom", Model.Id)
    </div>
</div>
